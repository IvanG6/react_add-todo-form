{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","App.tsx","api/todos.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","cn","completed","title","TodoList","todos","map","username","getUser","userId","usersFromServer","find","getNewTodoId","Math","max","initialTodos","App","useState","setTodos","newTodoTitle","setNewTodoTitle","selectedUserId","setSelectedUserId","titleError","setTitleError","selectedUserError","setSelectedUserError","onSubmit","event","preventDefault","newTodo","action","method","htmlFor","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.efe5b956.chunk.js","sourcesContent":["import { User } from '../../types/User';\n\ntype Props = {\n  user: User | null;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  user && (\n    <a className=\"userInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  )\n);\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo/UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={cn('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n    <UserInfo user={todo.user} />\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nconst getUser = (userId: number): User | null => {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n};\n\nconst getNewTodoId = (todos: Todo[]): number => {\n  return Math.max(...todos.map(todo => todo.id)) + 1;\n};\n\nconst initialTodos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>(initialTodos);\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [titleError, setTitleError] = useState(false);\n  const [selectedUserError, setSelectedUserError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (typeof selectedUserId === 'number' && newTodoTitle) {\n      const newTodo: Todo = {\n        id: getNewTodoId(todos),\n        userId: selectedUserId,\n        title: newTodoTitle,\n        completed: false,\n        user: getUser(selectedUserId),\n      };\n\n      setTodos([...todos, newTodo]);\n      setNewTodoTitle('');\n      setSelectedUserId(null);\n    } else {\n      setTitleError(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form onSubmit={handleSubmit} action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label htmlFor=\"titleTodo\">Title: </label>\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            id=\"titleTodo\"\n            placeholder=\"Enter a title\"\n            value={newTodoTitle}\n            onChange={(event) => {\n              setNewTodoTitle(event.target.value);\n              setTitleError(false);\n            }}\n          />\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User: </label>\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            value={selectedUserId || 0}\n            onChange={(event) => {\n              setSelectedUserId(+event.target.value);\n              setSelectedUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(({ id, name }) => (\n              <option key={id} value={id}>{name}</option>\n            ))}\n          </select>\n\n          {selectedUserError\n          && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}